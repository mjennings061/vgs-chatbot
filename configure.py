#!/usr/bin/env python3
"""Interactive configuration helper for VGS Chatbot."""

import os
import secrets
from pathlib import Path


def generate_jwt_secret() -> str:
    """Generate a secure JWT secret."""
    return secrets.token_urlsafe(32)


def get_user_input(prompt: str, default: str = "") -> str:
    """Get user input with optional default."""
    if default:
        response = input(f"{prompt} [{default}]: ").strip()
        return response if response else default
    return input(f"{prompt}: ").strip()


def get_yes_no(prompt: str, default: bool = False) -> bool:
    """Get yes/no input from user."""
    default_str = "Y/n" if default else "y/N"
    while True:
        response = input(f"{prompt} ({default_str}): ").strip().lower()
        if not response:
            return default
        if response in ('y', 'yes'):
            return True
        elif response in ('n', 'no'):
            return False
        print("Please enter 'y' or 'n'")


def create_env_file():
    """Interactively create .env file."""
    print("üîß VGS Chatbot Configuration Helper")
    print("=" * 40)
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        if not get_yes_no("‚ö†Ô∏è  .env file already exists. Overwrite?", False):
            print("Configuration cancelled.")
            return
    
    print("\nüìù Let's configure your VGS Chatbot...")
    
    # OpenAI Configuration
    print("\n1Ô∏è‚É£  OpenAI Configuration")
    print("   Get your API key from: https://platform.openai.com/api-keys")
    openai_key = get_user_input("OpenAI API Key (sk-...)")
    while not openai_key.startswith("sk-"):
        print("‚ùå OpenAI API keys start with 'sk-'")
        openai_key = get_user_input("OpenAI API Key (sk-...)")
    
    openai_model = get_user_input("OpenAI Model", "gpt-3.5-turbo")
    
    # SharePoint Configuration
    print("\n2Ô∏è‚É£  SharePoint Configuration")
    print("   Example: https://yourcompany.sharepoint.com/sites/yoursite")
    sharepoint_url = get_user_input("SharePoint Site URL")
    
    print("   Example: https://yourcompany.sharepoint.com/sites/yoursite/Shared Documents/2FTS")
    print("   Enter multiple URLs separated by commas")
    sharepoint_dirs = get_user_input("SharePoint Directory URLs")
    
    # Database Configuration
    print("\n3Ô∏è‚É£  Database Configuration")
    use_docker = get_yes_no("Use Docker for PostgreSQL database?", True)
    
    if use_docker:
        db_url = "postgresql+asyncpg://postgres:password@localhost:5432/vgs_chatbot"
        print(f"   Using Docker database: {db_url}")
    else:
        print("   Configure your own PostgreSQL connection:")
        db_host = get_user_input("Database Host", "localhost")
        db_port = get_user_input("Database Port", "5432")
        db_name = get_user_input("Database Name", "vgs_chatbot")
        db_user = get_user_input("Database User", "postgres")
        db_pass = get_user_input("Database Password")
        db_url = f"postgresql+asyncpg://{db_user}:{db_pass}@{db_host}:{db_port}/{db_name}"
    
    # Security Configuration
    print("\n4Ô∏è‚É£  Security Configuration")
    jwt_secret = generate_jwt_secret()
    print(f"   Generated JWT secret: {jwt_secret[:20]}...")
    
    # Application Configuration
    print("\n5Ô∏è‚É£  Application Configuration")
    app_title = get_user_input("Application Title", "VGS Chatbot")
    debug = get_yes_no("Enable debug mode?", False)
    
    # Create .env content
    env_content = f"""# VGS Chatbot Configuration
# Generated by configure.py

# Database Configuration
DATABASE_URL={db_url}

# JWT Configuration
JWT_SECRET={jwt_secret}

# OpenAI Configuration
OPENAI_API_KEY={openai_key}
OPENAI_MODEL={openai_model}

# SharePoint Configuration
SHAREPOINT_SITE_URL={sharepoint_url}
SHAREPOINT_DIRECTORY_URLS={sharepoint_dirs}

# Application Configuration
APP_TITLE={app_title}
DEBUG={str(debug).lower()}
"""
    
    # Write .env file
    with open(env_path, "w") as f:
        f.write(env_content)
    
    print(f"\n‚úÖ Configuration saved to {env_path}")
    
    # Next steps
    print("\nüöÄ Next Steps:")
    if use_docker:
        print("1. Start database: docker-compose up -d db")
        print("2. Test setup: python test_setup.py")
        print("3. Run app: poetry run streamlit run vgs_chatbot/gui/app.py")
        print("   Or: docker-compose up -d")
    else:
        print("1. Make sure PostgreSQL is running")
        print("2. Test setup: python test_setup.py") 
        print("3. Run app: poetry run streamlit run vgs_chatbot/gui/app.py")
    
    print("4. Visit: http://localhost:8501")


def main():
    """Main configuration function."""
    try:
        create_env_file()
    except KeyboardInterrupt:
        print("\n\n‚ùå Configuration cancelled by user.")
    except Exception as e:
        print(f"\n‚ùå Configuration error: {e}")


if __name__ == "__main__":
    main()